FORMAT: 1A
HOST: http://polls.apiblueprint.org/

# VoipTime Api

# Group Telephony

## Gateway [/gateway]

### Get gateway by id [GET /{id}]

+ Parameters
    + id (required)

+ Response 200 (application/json)

        {
            "id": "id1",
            "companyId": "57c67501a2e66615b6eeaad2",
            "name": "name",
            "username": "vasya",
            "password": "password",
            "realm": "realm",
            "fromUser": "from user",
            "proxy": "proxy",
            "sipPort": 8086,
            "fromDomain": "fromDomain",
            "expireSeconds": 5,
            "register": true,
            "inboundCodecPrefs": ["V8"],
            "outboundCodecPrefs": ["V8"],
            "dtmfType": "",
            "registerTransport": ["TCP"],
            "connected": true,
            "ping": 5,
            "enabled": true,
            "error": {
                "message": "error",
                "code": "3knmdns"
            },
            "enabledCallRecording": true
        }

### Get gateway by company id [GET /{?companyId}]

+ Parameters
    + companyId (required)

+ Response 200 (application/json)

        {
            "id": "id1",
            "companyId": "57c67501a2e66615b6eeaad2",
            "name": "name",
            "username": "vasya",
            "password": "password",
            "realm": "realm",
            "fromUser": "from user",
            "proxy": "proxy",
            "sipPort": 8086,
            "fromDomain": "fromDomain",
            "expireSeconds": 5,
            "register": true,
            "inboundCodecPrefs": ["V8"],
            "outboundCodecPrefs": ["V8"],
            "dtmfType": "",
            "registerTransport": ["TCP"],
            "connected": true,
            "ping": 5,
            "enabled": true,
            "error": {
                "message": "error",
                "code": "3knmdns"
            },
            "enabledCallRecording": true
        }

### Create gateway [POST]

+ Request (application/json)

        {
            "name": "name",
            "username": "vasya",
            "password": "password",
            "realm": "realm",
            "fromUser": "from user",
            "proxy": "proxy",
            "sipPort": 8086,
            "fromDomain": "fromDomain",
            "expireSeconds": 5,
            "inboundCodecPrefs": ["V8"],
            "outboundCodecPrefs": ["V8"],
            "dtmfType": "",
            "registerTransport": ["TCP"],
            "connected": true,
            "ping": 5,
            "enabled": true,
            "enabledCallRecording": true
        }

+ Response 200 (application/json)

        {
            "id": "id1",
            "companyId": "57c67501a2e66615b6eeaad2",
            "name": "name",
            "username": "vasya",
            "password": "password",
            "realm": "realm",
            "fromUser": "from user",
            "proxy": "proxy",
            "sipPort": 8086,
            "fromDomain": "fromDomain",
            "expireSeconds": 5,
            "register": true,
            "inboundCodecPrefs": ["V8"],
            "outboundCodecPrefs": ["V8"],
            "dtmfType": "",
            "registerTransport": ["TCP"],
            "connected": true,
            "ping": 5,
            "enabled": true,
            "error": {
                "message": "error",
                "code": "3knmdns"
            },
            "enabledCallRecording": true
        }
        
### Update gateway [PUT /{id}]

+ Parameters
    + id (required)

+ Request (application/json)

        {
            "id": "id1",
            "companyId": "57c67501a2e66615b6eeaad2",
            "name": "name",
            "username": "vasya",
            "password": "password",
            "realm": "realm",
            "fromUser": "from user",
            "proxy": "proxy",
            "sipPort": 8086,
            "fromDomain": "fromDomain",
            "expireSeconds": 5,
            "register": true,
            "inboundCodecPrefs": ["V8"],
            "outboundCodecPrefs": ["V8"],
            "dtmfType": "",
            "registerTransport": ["TCP"],
            "connected": true,
            "ping": 5,
            "enabled": true,
            "enabledCallRecording": true
        }

+ Response 200 (application/json)

        {
            "id": "id1",
            "companyId": "57c67501a2e66615b6eeaad2",
            "name": "name",
            "username": "vasya",
            "password": "password",
            "realm": "realm",
            "fromUser": "from user",
            "proxy": "proxy",
            "sipPort": 8086,
            "fromDomain": "fromDomain",
            "expireSeconds": 5,
            "register": true,
            "inboundCodecPrefs": ["V8"],
            "outboundCodecPrefs": ["V8"],
            "dtmfType": "",
            "registerTransport": ["TCP"],
            "connected": true,
            "ping": 5,
            "enabled": true,
            "error": {
                "message": "error",
                "code": "3knmdns"
            },
            "enabledCallRecording": true
        }

### Patch gateway [PATCH /{id}]

+ Parameters
    + id (required)

+ Request (application/json)

        {
            "enabled": false
        }

+ Response 200 (application/json)

        {
            "id": "id1",
            "companyId": "57c67501a2e66615b6eeaad2",
            "name": "name",
            "username": "vasya",
            "password": "password",
            "realm": "realm",
            "fromUser": "from user",
            "proxy": "proxy",
            "sipPort": 8086,
            "fromDomain": "fromDomain",
            "expireSeconds": 5,
            "register": false,
            "inboundCodecPrefs": ["V8"],
            "outboundCodecPrefs": ["V8"],
            "dtmfType": "",
            "registerTransport": ["TCP"],
            "connected": true,
            "ping": 5,
            "enabled": true,
            "error": {
                "message": "error",
                "code": "3knmdns"
            },
            "enabledCallRecording": true
        }

### Delete gateway [DELETE /{id}]

+ Parameters
    + id (required)

+ Request (application/json)

        {
            "enabled": false
        }

+ Response 200 (application/json)

        {
            "id": "id1",
            "companyId": "57c67501a2e66615b6eeaad2",
            "name": "name",
            "username": "vasya",
            "password": "password",
            "realm": "realm",
            "fromUser": "from user",
            "proxy": "proxy",
            "sipPort": 8086,
            "fromDomain": "fromDomain",
            "expireSeconds": 5,
            "register": false,
            "inboundCodecPrefs": ["V8"],
            "outboundCodecPrefs": ["V8"],
            "dtmfType": "",
            "registerTransport": ["TCP"],
            "connected": true,
            "ping": 5,
            "enabled": false,
            "error": {
                "message": "error",
                "code": "3knmdns"
            },
            "enabledCallRecording": true
        }

# Group Email

## Mailbox registrations [/mailboxes/registrations]

### Create registrations [POST]

+ Request (application/json)

        {
            "provider": "GMAIL | MS_EXCHANGE"
        }

+ Response 201 (application/json)

        {
            "id": "57c67501a2e66615b6eeaad2",
            "provider": "GMAIL | MS_EXCHANGE"
        }

### Update registrations [PUT]

+ Request (application/json)

        {
            "accessToken": "accessToken",
            "refreshToken": "refreshToken",
            "mailboxUsername": "mailboxUsername",
            "provider": "GMAIL | MS_EXCHANGE",
            "folders": {
                "id": "fdsfdsfdsfdsfssdfsdfsfd",
                "name": "fsfwefw234g455h67ytg"
            }
        }

+ Response 201 (application/json)

        {
            "id": "57c67501a2e66615b6eeaad2",
            "provider": "GMAIL | MS_EXCHANGE"
        }

### Get authorization url [GET /mailboxes/registrations/url]

+ Response 201 (application/json)

        {
            "authorizationUrl": "https://accounts.google.com/o/oauth2/auth?access_type=offline&client_id=136843422360-i1kpsavb4b85n9t38v7forae88c6eli2.apps.googleusercontent.com&redirect_uri=http://localhost:8080/mailboxes/authorizations&response_type=code&scope=https://mail.google.com/%20https://www.googleapis.com/auth/userinfo.email"
        }

### Get logged in user's registrations [GET /mailboxes/registrations]

+ Response 200 (application/json)

        {
            "mailboxUsername": "smith@voiptime.net",
            "userId": "askdjh2",
            "companyId": "asd098asd",
            "provider": "MS_EXCHANGE | GMAIL",
            "folders": [
                {
                    "id": "lkjasdas098",
                    "name": "INBOX"
                }
            ]
        }

+ Response 404

## Folders [/mailboxes/folders]

### Get folder list [GET]

+ Response 201 (application/json)

        [
            {
                "id": "fdsfdsfdsfdsfssdfsdfsfd",
                "name": "fsfwefw234g455h67ytg"
            }
        ]

## Lead tracking [/trackedleads]

### Enable tracking [POST]

+ Request (application/json)

        [
            {
                "leadId": 1,
                "companyId": "b23fu29f322932"
            }
        ]

+ Response 201

### Disable tracking [DELETE /trackedleads?{?leadId}]

+ Parameters
    + leadId (required)


+ Response 200


## Emails [/emails]

### Hide message [DELETE /emails/{id}]

+ Parameters
    + id (required)


+ Response 200

### Get lead messages [GET /emails{?leadId}{?offset}{?limit}]

+ Parameters
    + leadId (required)
    + offset (optional)
    + limit (optional)

+ Response 200 (application/json)

        [
            {
                "id": "klasd87sa",
                "companyMessageId": {
                    "messageId": {
                        "uid": "lkjasd9",
                        "folderName": "abc",
                        "mailboxUsername": "smith@voiptime.net"
                    },
                    "companyId": "asd098sd"
                },
                "text": "abcd",
                "subject": "subj",
                "sentDate": "2005-08-09T18:31:42",
                "recipients": [
                    "smithagain@voiptime.net"
                ],
                "sender": "newsmith@voiptime.net"
            }
        ]


## Unknown email addresses and untracked leads [/unknownaddresses]

### Get unknown email addresses and untracked leads [GET /unknownaddresses{?offset}{?limit}]

+ Parameters
    + offset (optional)
    + limit (optional)

+ Response 200 (application/json)

        [
            {
                "id": "abcd",
                "email": "smith@voiptime.net",
                "userId": "lkjsd8"
            },
            {
                "id": "bbcd",
                "email": "smith@voiptime.net",
                "leadId": 1
            }
        ]

### Get number of unknown addresses [GET /unknownaddresses/tootalNumber]

+ Response 200 (application/json)

        {
            "totalNumber": 2
        }

### Hide a couple of unknown addresses [DELETE /unknownaddresses{?ids}]

+ Parameters
    + ids (required)

+ Response 200

### Hide specific unknown addresses [DELETE /unknownaddresses/{id}]

+ Parameters
    + id (required)

+ Response 200

# Group Lead sources

## Sources [/sources]

### Get sources by group id [GET /sources{?groupId}]

+ Parameters
    + groupId (required)

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "fsfwefw234g455h67ytg",
                "groupId": 1,
                "active": true
            }
        ]

### Get source [GET /sources/{sourceId}]

+ Response 200 (application/json)

        {
            "id": 1,
            "name": "fsfwefw234g455h67ytg",
            "groupId": 1,
            "active": true
        }


### Create source [POST]

+ Request (application/json)

        {
            "name": "fsfwefw234g455h67ytg",
            "groupId": 1,
            "active": true
        }


+ Response 201 (application/json)

        {
            "id": 1,
            "name": "fsfwefw234g455h67ytg",
            "groupId": 1,
            "active": true
        }

### Delete source [DELETE /sources/{sourceId}]

+ Response 200 (application/json)

# Group Security

## Login [/login]

### Login [POST]

+ Request (application/json)

        {
            "username": "fsfwefw234g455h67ytg",
            "password": "b23fu29f322932"
        }

+ Response 200 (text/plain)

        r233f2rf1r2


# Group Groups

## All groups [/groups]

### Find all group of company [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Leads group",
                "demaription": "Description",
                "contacts": 7,
                "schemaId": 23,
                "virtual": false
            }, {
                "id": 2,
                "name": "Second leads group",
                "demaription": "Description",
                "contacts": 7,
                "schemaId": 25,
                "virtual": false
            }
        ]

### Create group [POST]

+ Request (application/json)

        {
            "leadSchemaId": 1,
            "companyId": "b23fu29f322932",
            "name": "Linux users",
            "leadsPerPage": 20,
            "description": "Nerds"
        }

+ Request (application/json)

        {
            "companyId": "b23fu29f322932",
            "leadIds": [1, 2, 3],
            "name": "Linux users",
            "leadsPerPage": 20,
            "fieldVisibility": [
                {
                    "1": "VISIBLE",
                    "2": "INVISIBLE"
                }
            ],
            "description": "Nerds"
        }


+ Request (application/json)

        {
            "filterId": 1,
            "name": "Linux users",
            "leadsPerPage": 20,
            "fieldVisibility": [
                {
                    "1": "VISIBLE",
                    "2": "INVISIBLE"
                }
            ],
            "description": "Nerds"
        }

+ Response 201 (application/json)

        {
            "id": 1,
            "leadSchemaId": 1,
            "companyId": "b23fu29f322932",
            "name": "Linux users",
            "leadsPerPage": 20,
            "description": "Nerds"
        }


+ Response 201 (application/json)

        {
            "id": 1,
            "companyId": "b23fu29f322932",
            "leadIds": [1, 2, 3],
            "name": "Linux users",
            "leadsPerPage": 20,
            "fieldVisibility": [
                {
                    "1": "VISIBLE",
                    "2": "INVISIBLE"
                }
            ],
            "lastUpdateDateTime": "2005-08-09T18:31:42.201",
            "description": "Nerds",
        }


+ Response 201 (application/json)

        {
            "id": 1,
            "filterId": 1,
            "name": "Linux users",
            "leadsPerPage": 20,
            "fieldVisibility": [
                {
                    "1": "VISIBLE",
                    "2": "INVISIBLE"
                }
            ],
            "lastUpdateDateTime": "2005-08-09T18:31:42.201",
            "description": "Nerds"
        }


## Specific group [/groups/{groupId}]

### Get group by id [GET]

+ Parameters
    + groupId (required)

+ Response 200 (application/json)

        {
            "companyId": "abc",
            "schemaId": 1,
            "id": 1,
            "filterId": 1,
            "leadIds": [ 1, 2 ,3 ],
            "lastUpdateDateTime": "2005-08-09T18:31:42.201",
            "name": "Nerds",
            "leadsPerPage": 20,
            "fieldVisibility": [
                {
                    "1": "VISIBLE",
                    "2": "INVISIBLE"
                }
            ],
            "description": "Nerds",
            "cloneLeadOnCustomerCreation": false,
            "defaultGroup": false
        }

## Group's lead statuses [/groups/{groupId}/leadStatuses]

+ Parameters
    + groupId (required)


### Get lead statues [GET]

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "Warm",
                "description": "Interested in",
                "companyId": "abc123",
                "color": {
                    "red": 255,
                    "green": 0,
                    "blue": 164
                },
                "active": true,
                "default": true,
                "groupId": 1
            }
        ]

### Create lead statuses [POST]

+ Request (application/json)

        {
            "name": "name",
            "description": "fdsdescription",
            "color": {
                "red": 255,
                "green": 255,
                "blue": 255
            },
            "active": true,
            "default": true,
            "groupId": 1
        }

+ Response 200 (application/json)

        {
            "id": 10,
            "name": "name",
            "description": "fdsdescription",
            "color": {
                "red": 255,
                "green": 255,
                "blue": 255
            },
            "groupId": 1,
            "active": true,
            "default": true
        }

### Update lead statuses [PUT]

+ Request (application/json)

        {
            "id": 10,
            "name": "name",
            "description": "fdsdescription",
            "color": {
                "red": 255,
                "green": 255,
                "blue": 255
            },
            "groupId": 1,
            "active": true,
            "default": true

        }

+ Response 200 (application/json)

        {
            "id": 10,
            "name": "name",
            "description": "fdsdescription",
            "color": {
                "red": 255,
                "green": 255,
                "blue": 255
            },
            "active": true,
            "default": true,
            "groupId": 1

        }

# Group Leads

## Attachments [/leads/{leadId}/attachments]

+ Parameters
    + leadId (required)

### Delete lead attachment [DELETE /leads/{leadId}/attachments/{attachmentId}]

+ Parameters
    + attachmentId (required)
    + leadId (required)

+ Response 200 (application/json)


### Add lead attachment [POST]

+ Request (application/json)

        {
            "leadId": 1,
            "performerId": 1,
            "name": "orders.xlsx",
            "blob": "base64 encoded attachment"
        }

+ Response 201 (application/json)

        {
            "id": 1,
            "leadId": 1,
            "performerId": 1,
            "name": "orders.xlsx",
            "uploadDateTime": "2005-08-09T18:31:42.201",
            "blob": "base64 encoded attachment"
        }

### Get lead attachments [GET]

+ Response 201 (application/json)

        [
            {
                "id": 1,
                "leadId": 1,
                "performerId": 1,
                "name": "orders.xlsx",
                "uploadDateTime": "2005-08-09T18:31:42.201"
            }
        ]

## Filter leads [/leads/{?filterId}{?limit}{?offset}]

### GET

+ Parameters
    + filterId (number, required)
    + limit (number, optional)
    + offset (number, optional)

+ Response 200 (application/json)

        {
            "leads": [
                {
                    "id": 1,
                    "companyId": "abc",
                    "groupId": 1,
                    "statusId": 1,
                    "email": "foo@bar",
                    "phones": [
                        {
                            "id": 1,
                            "number": "123",
                            "active": true,
                            "label": "Work phone"
                        }
                    ],
                    "name": "bar",
                    "surname": "baz",
                    "dynamicData": [
                        {
                            "foo": "bar"
                        }
                    ],
                    "comments": [
                        {
                            "id": 1,
                            "text": "He knows rm -rf",
                            "authorId": "abc",
                            "dateTime": "2005-08-09T18:31:42"
                        }
                    ],
                    "sourceId": 1
                }
            ]
        }

## Find leads by group id [/leads/{?groupId}{?limit}{?offset}{?virtualGroup}]

### GET

+ Parameters
    + groupId (number, required)
    + virtualGroup (boolean, optional)
    + limit (number, optional)
    + offset (number, optional)

+ Response 200 (application/json)

        {
            "leads": [
                {
                    "id": 1,
                    "companyId": "abc",
                    "groupId": 1,
                    "statusId": 1,
                    "email": "foo@bar",
                    "phones": [
                        {
                            "id": 1,
                            "number": "123",
                            "active": true,
                            "label": "Work phone"
                        }
                    ],
                    "name": "bar",
                    "surname": "baz",
                    "dynamicData": [
                        {
                            "foo": "bar"
                        }
                    ],
                    "comments": [
                        {
                            "id": 1,
                            "text": "He knows rm -rf",
                            "authorId": "abc",
                            "dateTime": "2005-08-09T18:31:42"
                        }
                    ],
                    "sourceId": 1
                }
            ]
        }

## Lead status changes [/leads/{leadId}/status]

### Get all [GET]

+ Parameters
    + leadId (required)

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "dateTime": "2005-08-09T18:31:42",
                "leadId": 1,
                "groupId": 1,
                "performerId": 1,
                "statusId": 1,
                "type": "LeadStatusChangedEvent"
            }
        ]

## Leads [/leads{?limit}{?offset}]

### Create lead [POST]

+ Request (application/json)

        {
            "companyId": "abc",
            "groupId": 1,
            "statusId": 1,
            "email": "foo@bar",
            "phones": [
                {
                    "id": 1,
                    "number": "123",
                    "active": true,
                    "label": "foo"
                }
            ],
            "name": "bar",
            "surname": "baz",
            "dynamicData": [
                {
                    "foo": "bar"
                }
            ],
            "sourceId": 1
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "companyId": "abc",
            "groupId": 1,
            "statusId": 1,
            "email": "foo@bar",
            "phones": [
                {
                    "id": 1,
                    "number": "123",
                    "active": true,
                    "label": "foo"
                }
            ],
            "name": "bar",
            "surname": "baz",
            "dynamicData": [
                {
                    "foo": "bar"
                }
            ],
            "comments": [
                {
                    "id": 1,
                    "text": "He knows rm -rf",
                    "authorId": "abc",
                    "dateTime": "2005-08-09T18:31:42"
                }
            ],
            "sourceId": 1
        }

### GET

+ Parameters
    + limit (number, optional)
    + offset (number, optional)

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "companyId": "abc",
                "groupId": 1,
                "statusId": 1,
                "email": "foo@bar",
                "phones": [
                    {
                        "id": 1,
                        "number": "123",
                        "active": true,
                        "label": "foo"
                    }
                ],
                "name": "bar",
                "surname": "baz",
                "dynamicData": [
                    {
                        "foo": "bar"
                    }
                ],
                "comments": [
                    {
                        "id": 1,
                        "text": "He knows rm -rf",
                        "authorId": "abc",
                        "dateTime": "2005-08-09T18:31:42"
                    }
                ],
                "sourceId": 1
            }, {
                "id": 2,
                "companyId": "abcd",
                "groupId": 1,
                "statusId": 1,
                "email": "foo@bar.bar",
                "phones": [
                    {
                        "id": 1,
                        "number": "123",
                        "active": true,
                        "label": "foo"
                    }
                ],
                "name": "fbar",
                "surname": "baz",
                "dynamicData": [
                    {
                        "foo": "bar"
                    }
                ],
                "comments": [
                    {
                        "id": 1,
                        "text": "He knows rm -rf",
                        "authorId": "abc",
                        "dateTime": "2005-08-09T18:31:42"
                    }
                ],
                "sourceId": 1
            }, {
                "id": 3,
                "companyId": "abc",
                "groupId": 1,
                "statusId": 1,
                "email": "foo@bar",
                "phones": [
                    {
                        "id": 1,
                        "number": "123",
                        "active": true,
                        "label": "foo"
                    }
                ],
                "name": "bar",
                "surname": "baz",
                "dynamicData": [
                    {
                        "foo": "bar"
                    }
                ],
                "comments": [
                    {
                        "id": 1,
                        "text": "He knows rm -rf",
                        "authorId": "abc",
                        "dateTime": "2005-08-09T18:31:42"
                    }
                ],
                "sourceId": 1
            }, {
                "id": 4,
                "companyId": "abcd",
                "groupId": 1,
                "statusId": 1,
                "email": "foo@bar.bar",
                "phones": [
                    {
                        "id": 1,
                        "number": "123",
                        "active": true,
                        "label": "foo"
                    }
                ],
                "name": "fbar",
                "surname": "baz",
                "dynamicData": [
                    {
                        "foo": "bar"
                    }
                ],
                "comments": [
                    {
                        "id": 1,
                        "text": "He knows rm -rf",
                        "authorId": "abc",
                        "dateTime": "2005-08-09T18:31:42"
                    }
                ],
                "sourceId": 1
            }
        ]

## Lead operations [/leads/{leadId}]

### Update lead [PUT]

+ Parameters
    + leadId (required)

+ Request (application/json)

        {
            "id": 1,
            "companyId": "abc",
            "groupId": 1,
            "statusId": 1,
            "email": "foo@bar",
            "phones": [
                {
                    "id": 1,
                    "number": "123",
                    "active": true,
                    "label": "foo"
                }
            ],
            "name": "bar",
            "surname": "baz",
            "dynamicData": [
                {
                    "foo": "bar"
                }
            ],
            "comments": [
                {
                    "id": 1,
                    "text": "He knows rm -rf",
                    "authorId": "abc",
                    "dateTime": "2005-08-09T18:31:42"
                }
            ],
            "sourceId": 1
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "companyId": "abc",
            "groupId": 1,
            "statusId": 1,
            "email": "foo@bar",
            "phones": [
                {
                    "id": 1,
                    "number": "123",
                    "active": true,
                    "label": "foo"
                }
            ],
            "name": "bar",
            "surname": "baz",
            "dynamicData": [
                {
                    "foo": "bar"
                }
            ],
            "comments": [
                {
                    "id": 1,
                    "text": "He knows rm -rf",
                    "authorId": "abc",
                    "dateTime": "2005-08-09T18:31:42"
                }
            ],
            "sourceId": 1
        }

### Get lead [GET]

+ Parameters
    + leadId (required)

+ Response 200 (application/json)

        {
            "id": 1,
            "companyId": "abc",
            "groupId": 1,
            "statusId": 1,
            "email": "foo@bar",
            "phones": [
                {
                    "id": 1,
                    "number": "123",
                    "active": true,
                    "label": "foo"
                }
            ],
            "name": "bar",
            "surname": "baz",
            "dynamicData": [
                {
                    "foo": "bar"
                }
            ],
            "comments": [
                {
                    "id": 1,
                    "text": "He knows rm -rf",
                    "authorId": "abc",
                    "dateTime": "2005-08-09T18:31:42"
                }
            ],
            "sourceId": 1
        }

### Delete lead [DELETE]

+ Parameters
    + leadId (required)

+ Response 200 (application/json)

        {
            "id": 1,
            "companyId": "abc",
            "groupId": 1,
            "statusId": 1,
            "email": "foo@bar",
            "phones": [
                {
                    "id": 1,
                    "number": "123",
                    "active": true,
                    "label": "foo"
                }
            ],
            "name": "bar",
            "surname": "baz",
            "dynamicData": [
                {
                    "foo": "bar"
                }
            ],
            "comments": [
                {
                    "id": 1,
                    "text": "He knows rm -rf",
                    "authorId": "abc",
                    "dateTime": "2005-08-09T18:31:42"
                }
            ],
            "sourceId": 1
        }

## Lead events [/]

### Get lead events [GET /leads/{leadId}/events]

+ Parameters
    + leadId (required)

+ Response 200 (application/json)

        {
            "id": 1,
            "dateTime": "2005-08-09T18:31:42",
            "leadId": 1,
            "groupId": 1,
            "type": "LeadCommentedEvent"
        }

### Add comment [POST /leads/{leadId}/events/comments]

+ Parameters
    + leadId (required)

+ Response 200 (application/json)

        {
            "id": 1,
            "dateTime": "2005-08-09T18:31:42",
            "groupId": 1,
            "text": "bal bla bla",
            "blacklisted": false
        }

### Delete comment [DELETE /leads/{leadId}/events/{commentId}]

+ Parameters
    + commentId (required)
    + leadId (required)

+ Response 200 (application/json)



## Lead callbacks [/callbacks]

### Get lead callbacks [GET /callbacks{?leadId}]

+ Parameters
    + leadId (required)

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "leadId": 1,
                "description": "",
                "remindOnly": false,
                "name": "name",
                "userId": "userId",
                "phoneId": "1",
                "dateTime": "2005-08-09T18:31:42",
                "finishTime": "2005-08-09T18:31:42",
                "beforeReminder": {
                    "number": 15,
                    "unit": "MINUTES"
                }
            },
            {
                "id": 2,
                "leadId": 1,
                "description": "",
                "remindOnly": false,
                "name": "name",
                "userId": "userId",
                "phoneId": "1",
                "dateTime": "2005-08-09T18:31:42",
                "finishTime": "2005-08-09T18:31:42",
                "beforeReminder": {
                    "number": 15,
                    "unit": "MINUTES"
                }
            }
        ]

### Get callback by id [GET /callbacks/{callbackId}]

+ Parameters
    + callbackId (required)


+ Response 200 (application/json)

        {
            "id": 1,
            "leadId": 1,
            "description": "",
            "remindOnly": false,
            "name": "name",
            "userId": "userId",
            "phoneId": "1",
            "dateTime": "2005-08-09T18:31:42",
            "finishTime": "2005-08-09T18:31:42",
            "beforeReminder": {
                "number": 15,
                "unit": "MINUTES"
            }
        }

### Add lead callbacks [POST]


+ Request 200 (application/json)

        {
                "leadId": 1,
                "description": "",
                "remindOnly": false,
                "name": "name",
                "userId": "userId",
                "phoneId": "1",
                "dateTime": "2005-08-09T18:31:42",
                "finishTime": "2005-08-09T18:31:42",
                "beforeReminder": {
                    "number": 15,
                    "unit": "MINUTES"
                }
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "leadId": 1,
            "description": "",
            "remindOnly": false,
            "name": "name",
            "userId": "userId",
            "phoneId": "1",
            "dateTime": "2005-08-09T18:31:42",
            "finishTime": "2005-08-09T18:31:42",
            "beforeReminder": {
                "number": 15,
                "unit": "MINUTES"
            }
        }


### Delete lead callbacks [DELETE /callbacks/{callbackId}]

+ Parameters
    + callbackId (required)

+ Response 200 (application/json)


## Import leads [/leads/import]

### Import [POST]


+ Response 200 (application/json)

        {
            "sheetName": "leads sheet"
            "targetGroupId": 1,
            "skipRowsFromTop": 3,
            "columnMapping": {
                "filedName1": 3,
                "filedName2": 1,
            },
            "importMode": "ADD_ONLY | ADD_SKIP_DUPLICATES | ADD_UPDATE_EXISTING",
            "source": "Base64"
        }



# Group Users

## User ids [/usersIds]

### Get user ids [GET]

+ Response 200 (application/json)

        [
            {
                "id": "5779fb6342218200012e6349",
                "name" : "danikkks",
                "lastname": "sav",
                "roleName": "role name1"
            },
            {
                "id": "5779fb6342218200012e6349",
                "name" : "andriy",
                "lastname": "test",
                "roleName": "role name2"
            }
        ]



## Questions Collection [/users/{id}{?exclude}]

### Get user without picture [GET]

+ Parameters
    + exclude (optional, list, `pic`)

+ Response 200 (application/json)

        {
            "id": "57695b7a82f82e0001079bb4",
            "role": {
                "id": "57695b7a82f82e0001079bb4",
                "name": "Owner",
                "description": "description",
                "permissions": [
                    "57695b7a82f82e0001079bb4",
                    "57695b7a82f82e0001079bb4",
                    "57695b7a82f82e0001079bb4",
                    "57695b7a82f82e0001079bb4",
                    "57695b7a82f82e0001079bb4"
                ],
                "companyId": "57695b7a82f82e0001079bb4"
            },
            "name" : "danikkks",
            "lastname": "last name",
            "email" : "foo22@bar",
            "companyId" : "5779fb6342218200012e6348",
            "position" : "ldksjfldkfjsdlkf",
            "country" : "1",
            "phoneNumber" : "234234234",
            "sendLoginInformationToEmail": "true",
            "phonePassword": ""
        }


### Create user [POST]

+ Request (application/json)

        {
            "roleId": "57695b7a82f82e0001079bb4",
            "name" : "danikkks",
            "lastname": "last name",
            "email" : "foo22@bar",
            "companyId" : "5779fb6342218200012e6348",
            "position" : "ldksjfldkfjsdlkf",
            "country" : "1",
            "userPicture": "base54",
            "phoneNumber" : "234234234",
            "sendLoginInformationToEmail": "true",
            "phonePassword": ""
        }


+ Response 201 (application/json)

    + Body

                {
                    "id": "57695b7a82f82e0001079bb4",
                    "roleId": "57695b7a82f82e0001079bb4",
                    "name" : "danikkks",
                    "lastname": "last name",3
                    "email" : "foo22@bar",
                    "companyId" : "5779fb6342218200012e6348",
                    "position" : "ldksjfldkfjsdlkf",
                    "country" : "1",
                    "userPicture": "base54",
                    "phoneNumber" : "234234234",
                    "sendLoginInformationToEmail": "true",
                    "phonePassword": ""
                }

# Group Lead schemas

## Order of fields [/fieldOrders/{schemaId}]

### Get [GET]

+ Parameters
    + schemaId (required)

+ Response 200 (application/json)

        {
            "schemaId": 1,
            "fieldOrders": [
                {
                    "fieldId": 1,
                    "order": 0
                },
                {
                    "fieldId": 2,
                    "order": 1
                }
            ]
        }

### Save [POST]

+ Request (application/json)

        {
            "schemaId": 1,
            "fieldOrders": [
                {
                    "fieldId": 1,
                    "order": 0
                },
                {
                    "fieldId": 2,
                    "order": 1
                }
            ]
        }

+ Response 200 (application/json)

        {
            "schemaId": 1,
            "fieldOrders": [
                {
                    "fieldId": 1,
                    "order": 0
                },
                {
                    "fieldId": 2,
                    "order": 1
                }
            ]
        }

### Update [PUT]

+ Request (application/json)

        {
            "schemaId": 1,
            "fieldOrders": [
                {
                    "fieldId": 1,
                    "order": 0
                },
                {
                    "fieldId": 2,
                    "order": 1
                }
            ]
        }

+ Response 200 (application/json)

        {
            "schemaId": 1,
            "fieldOrders": [
                {
                    "fieldId": 1,
                    "order": 0
                },
                {
                    "fieldId": 2,
                    "order": 1
                }
            ]
        }


## Specific lead schema [/leadSchemas]

### Get schema [GET /leadSchemas/{schemaId}]

+ Parameters
    + schemaId (required)

+ Response 200 (application/json)

        {
            "id": 1,
            "dynamicFields": [
                {
                    "id": 1,
                    "name": "Country",
                    "visibilityOptions": {
                        "id": 1,
                        "leadCard": true
                    },
                    "dataType": "STRING"
                },
                {
                    "id": 2,
                    "name": "Age",
                    "visibilityOptions": {
                        "id": 2,
                        "leadCard": true
                    },
                    "dataType": "NUMBER"
                },
                {
                    "id": 3,
                    "name": "Rating",
                    "visibilityOptions": {
                        "id": 3,
                        "leadCard": true
                    },
                    "dataType": "DOUBLE"
                },
                {
                    "id": 4,
                    "name": "Geek",
                    "visibilityOptions": {
                        "id": 4,
                        "leadCard": true
                    },
                    "dataType": "BOOLEAN"
                }
            ],
            "staticFields": [
                {
                    "id": 5,
                    "name": "groupId",
                    "visibilityOptions": {
                        "id": 5,
                        "leadCard": true
                    }
                }
            ],
            "bridgeConfiguration": {
                "id": 1,
                "fieldBridges": [
                    {
                        "id": 1,
                        "fieldId": 1,
                        "remoteConfiguration": {
                            "urlTemplate": "http://company.com",
                            "headers": {
                                "x-auth-token": "abc"
                            },
                            "method": "GET",
                            "body": "{}",
                            "path": "$..author"
                        }
                    }
                ]
            },
            "defaultLeadStatusId": 1
        }

### Update schema [PUT /leadSchemas/{schemaId}]

+ Parameters
    + schemaId (required)

+ Request 200 (application/json)

        {
            "dynamicFields": [
                {
                    "name": "Country",
                    "visibilityOptions": {
                        "id": 1,
                        "leadCard": true
                    },
                    "dataType": "STRING"
                },
                {
                    "name": "Age",
                    "visibilityOptions": {
                        "id": 2,
                        "leadCard": true
                    },
                    "dataType": "NUMBER"
                },
                {
                    "name": "Rating",
                    "visibilityOptions": {
                        "id": 3,
                        "leadCard": true
                    },
                    "dataType": "DOUBLE"
                },
                {
                    "name": "Geek",
                    "visibilityOptions": {
                        "id": 4,
                        "leadCard": true
                    },
                    "dataType": "BOOLEAN"
                }
            ],
            "staticFields": [
                {
                    "name": "groupId",
                    "visibilityOptions": {
                        "id": 5,
                        "leadCard": true
                    }
                }
            ],
            "bridgeConfiguration": {
                "id": 1,
                "fieldBridges": [
                    {
                        "fieldId": 1,
                        "remoteConfiguration": {
                            "urlTemplate": "http://company.com",
                            "headers": {
                                "x-auth-token": "abc"
                            },
                            "method": "GET",
                            "body": "{}",
                            "path": "$..author"
                        }
                    }
                ]
            },
            "defaultLeadStatusId": 1
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "dynamicFields": [
                {
                    "id": 1,
                    "name": "Country",
                    "visibilityOptions": {
                        "id": 1,
                        "leadCard": true
                    },
                    "dataType": "STRING"
                },
                {
                    "id": 2,
                    "name": "Age",
                    "visibilityOptions": {
                        "id": 2,
                        "leadCard": true
                    },
                    "dataType": "NUMBER"
                },
                {
                    "id": 3,
                    "name": "Rating",
                    "visibilityOptions": {
                        "id": 3,
                        "leadCard": true
                    },
                    "dataType": "DOUBLE"
                },
                {
                    "id": 4,
                    "name": "Geek",
                    "visibilityOptions": {
                        "id": 4,
                        "leadCard": true
                    },
                    "dataType": "BOOLEAN"
                }
            ],
            "staticFields": [
                {
                    "id": 5,
                    "name": "groupId",
                    "visibilityOptions": {
                        "id": 5,
                        "leadCard": true
                    }
                }
            ],
            "bridgeConfiguration": {
                "id": 1,
                "fieldBridges": [
                    {
                        "id": 1,
                        "fieldId": 1,
                        "remoteConfiguration": {
                            "urlTemplate": "http://company.com",
                            "headers": {
                                "x-auth-token": "abc"
                            },
                            "method": "GET",
                            "body": "{}",
                            "path": "$..author"
                        }
                    }
                ]
            },
            "defaultLeadStatusId": 1
        }

### Create schema [POST]


+ Request 200 (application/json)

        {
            "dynamicFields": [
                {
                    "name": "Country",
                    "visibilityOptions": {
                        "id": 1,
                        "leadCard": true
                    },
                    "dataType": "STRING"
                },
                {
                    "name": "Age",
                    "visibilityOptions": {
                        "id": 2,
                        "leadCard": true
                    },
                    "dataType": "NUMBER"
                },
                {
                    "name": "Rating",
                    "visibilityOptions": {
                        "id": 3,
                        "leadCard": true
                    },
                    "dataType": "DOUBLE"
                },
                {
                    "name": "Geek",
                    "visibilityOptions": {
                        "id": 4,
                        "leadCard": true
                    },
                    "dataType": "BOOLEAN"
                }
            ],
            "staticFields": [
                {
                    "name": "groupId",
                    "visibilityOptions": {
                        "id": 5,
                        "leadCard": true
                    }
                }
            ],
            "bridgeConfiguration": {
                "id": 1,
                "fieldBridges": [
                    {
                        "fieldId": 1,
                        "remoteConfiguration": {
                            "urlTemplate": "http://company.com",
                            "headers": {
                                "x-auth-token": "abc"
                            },
                            "method": "GET",
                            "body": "{}",
                            "path": "$..author"
                        }
                    }
                ]
            },
            "defaultLeadStatusId": 1
        }

+ Response 200 (application/json)

        {
            "id": 1,
            "dynamicFields": [
                {
                    "id": 1,
                    "name": "Country",
                    "visibilityOptions": {
                        "id": 1,
                        "leadCard": true
                    },
                    "dataType": "STRING"
                },
                {
                    "id": 2,
                    "name": "Age",
                    "visibilityOptions": {
                        "id": 2,
                        "leadCard": true
                    },
                    "dataType": "NUMBER"
                },
                {
                    "id": 3,
                    "name": "Rating",
                    "visibilityOptions": {
                        "id": 3,
                        "leadCard": true
                    },
                    "dataType": "DOUBLE"
                },
                {
                    "id": 4,
                    "name": "Geek",
                    "visibilityOptions": {
                        "id": 4,
                        "leadCard": true
                    },
                    "dataType": "BOOLEAN"
                }
            ],
            "staticFields": [
                {
                    "id": 5,
                    "name": "groupId",
                    "visibilityOptions": {
                        "id": 5,
                        "leadCard": true
                    }
                }
            ],
            "bridgeConfiguration": {
                "id": 1,
                "fieldBridges": [
                    {
                        "id": 1,
                        "fieldId": 1,
                        "remoteConfiguration": {
                            "urlTemplate": "http://company.com",
                            "headers": {
                                "x-auth-token": "abc"
                            },
                            "method": "GET",
                            "body": "{}",
                            "path": "$..author"
                        }
                    }
                ]
            },
            "defaultLeadStatusId": 1
        }

## Lead fields [/leadSchemas/{?fieldsType}]

### Get schema [GET]

+ Parameters
    + fieldsType (required, string, `static`)

+ Response 200 (application/json)

        [
            {
                "id": 1,
                "name": "name",
                "visibilityOptions": {
                    "id": 5,
                    "leadCard": true
                }
            },
            {
                "id": 3,
                "name": "lastName",
                "visibilityOptions": {
                    "id": 5,
                    "leadCard": true
                }
            },
            {
                "id": 5,
                "name": "groupId",
                "visibilityOptions": {
                    "id": 5,
                    "leadCard": true
                }
            }
        ]

# Group Settings

## Lead table settings [/leads/tableSettings]

### Get lead table settings [GET]

+ Response 200 (application/json)

        {
            "contactsPerPage": 2,
            "fields": [
            {
            "fieldName": "field1",
            "visible": true,
            "serialNumber": 1
            }
            ]
        }

### Save lead table settings [POST]

+ Request 200 (application/json)

        {
            "contactsPerPage": 10,
            "fields": [
            {
            "fieldName": "field1",
            "visible": true,
            "serialNumber": 1
            }
            ]
        }

+ Response 200 (application/json)

        {
            "companyId": "dsff23f213f223",
            "contactsPerPage": 10,
            "fields": [
            {
            "fieldName": "field1",
            "visible": true,
            "serialNumber": 1
            }
            ]
        }

# Group Filter

## Group filters [/filters{?groupId}]

### Get group filters [GET]

+ Parameters
    + groupId (optional)

+ Response 200 (application/json)

        [
            {
                "id": 21,
                "name": "All",
                "groupId": 33,
                "criterias": [
                    {
                        "id": 42,
                        "fieldId": 34,
                        "operator": "=",
                        "value": "foo",
                        "dynamic": "false"
                    },
                    {
                        "id": 43,
                        "fieldId": 35,
                        "operator": ">",
                        "value": "4",
                        "dynamic": "false"
                    },
                    {
                        "id": 44,
                        "fieldId": 35,
                        "operator": ">=",
                        "value": "5",
                        "dynamic": "true"
                    },
                    {
                        "id": 45,
                        "fieldId": 36,
                        "operator": "<",
                        "value": "3",
                        "dynamic": "false"
                    },
                    {
                        "id": 46,
                        "fieldId": 37,
                        "operator": "<=",
                        "value": "2",
                        "dynamic": "false"
                    },
                    {
                        "id": 47,
                        "fieldId": 38,
                        "operator": "!=",
                        "value": "foo",
                        "dynamic": "false"
                    },
                    {
                        "id": 48,
                        "fieldId": 39,
                        "operator": "like",
                        "value": "%foo",
                        "dynamic": "false"
                    }
                ]
            }
        ]


### Create filter [POST]

+ Request (application/json)

        {
            "name": "All",
            "groupId": 33,
            "criterias": [
                {
                    "fieldId": 34,
                    "operator": "=",
                    "value": "foo",
                    "dynamic": "false"
                }
            ]
        }

+ Request (application/json)

        {
            "name": "All",
            "criterias": [
                {
                    "fieldId": 34,
                    "operator": "=",
                    "value": "foo",
                    "dynamic": "false"
                }
            ]
        }

+ Response 201 (application/json)

        {
            "id": 1
            "name": "All",
            "groupId": 33,
            "criterias": [
                {
                    "id": 1
                    "fieldId": 34,
                    "operator": "=",
                    "value": "foo",
                    "dynamic": "false"
                }
            ]
        }

+ Response 201 (application/json)

        {
            "id": 1
            "name": "All",
            "companyId": "sf2827278f29f2f",
            "criterias": [
                {
                    "id": 1
                    "fieldId": 34,
                    "operator": "=",
                    "value": "foo",
                    "dynamic": "false"
                }
            ]
        }


## All filters [/filters]

### Get company filters [GET]

+ Response 200 (application/json)

        [
            {
                "id": 21,
                "name": "All",
                "groupId": 33,
                "criterias": [
                    {
                        "id": 42,
                        "fieldId": 34,
                        "operator": "=",
                        "value": "foo",
                        "dynamic": "false"
                    },
                    {
                        "id": 43,
                        "fieldId": 35,
                        "operator": ">",
                        "value": "4",
                        "dynamic": "false"
                    },
                    {
                        "id": 44,
                        "fieldId": 35,
                        "operator": ">=",
                        "value": "5",
                        "dynamic": "true"
                    },
                    {
                        "id": 45,
                        "fieldId": 36,
                        "operator": "<",
                        "value": "3",
                        "dynamic": "false"
                    },
                    {
                        "id": 46,
                        "fieldId": 37,
                        "operator": "<=",
                        "value": "2",
                        "dynamic": "false"
                    },
                    {
                        "id": 47,
                        "fieldId": 38,
                        "operator": "!=",
                        "value": "foo",
                        "dynamic": "false"
                    },
                    {
                        "id": 48,
                        "fieldId": 39,
                        "operator": "like",
                        "value": "%foo",
                        "dynamic": "false"
                    }
                ]
            }
        ]

### Create filter [POST]

+ Request (application/json)

        {
            "name": "All",
            "criterias": [
                {
                    "fieldId": 34,
                    "operator": "=",
                    "value": "foo",
                    "dynamic": "false"
                }
            ]
        }


+ Response 201 (application/json)

        {
            "id": 1
            "name": "All",
            "companyId": "sf2827278f29f2f",
            "criterias": [
                {
                    "id": 1
                    "fieldId": 34,
                    "operator": "=",
                    "value": "foo",
                    "dynamic": "false"
                }
            ]
        }



## Specific filter operations [/filters/{filterId}]

### Delete filter [DELETE]

+ Parameters
    + filterId (required)

+ Response 200

### Update filter [PUT]

+ Parameters
    + filterId (required)

+ Request (application/json)

        {
            "id": 21,
            "name": "All",
            "groupId": 33,
            "criterias": [
                {
                    "id": 42,
                    "fieldId": 34,
                    "operator": "=",
                    "value": "foo",
                    "dynamic": "false"
                },
                {
                    "id": 43,
                    "fieldId": 35,
                    "operator": ">",
                    "value": "4",
                    "dynamic": "false"
                },
                {
                    "id": 44,
                    "fieldId": 35,
                    "operator": ">=",
                    "value": "5",
                    "dynamic": "true"
                },
                {
                    "id": 45,
                    "fieldId": 36,
                    "operator": "<",
                    "value": "3",
                    "dynamic": "false"
                },
                {
                    "id": 46,
                    "fieldId": 37,
                    "operator": "<=",
                    "value": "2",
                    "dynamic": "false"
                },
                {
                    "id": 47,
                    "fieldId": 38,
                    "operator": "!=",
                    "value": "foo",
                    "dynamic": "false"
                },
                {
                    "id": 48,
                    "fieldId": 39,
                    "operator": "like",
                    "value": "%foo",
                    "dynamic": "false"
                }
            ]
        }

+ Response 200 (application/json)

        {
            "id": 21,
            "name": "All",
            "groupId": 33,
            "criterias": [
                {
                    "id": 42,
                    "fieldId": 34,
                    "operator": "=",
                    "value": "foo",
                    "dynamic": "false"
                },
                {
                    "id": 43,
                    "fieldId": 35,
                    "operator": ">",
                    "value": "4",
                    "dynamic": "false"
                },
                {
                    "id": 44,
                    "fieldId": 35,
                    "operator": ">=",
                    "value": "5",
                    "dynamic": "true"
                },
                {
                    "id": 45,
                    "fieldId": 36,
                    "operator": "<",
                    "value": "3",
                    "dynamic": "false"
                },
                {
                    "id": 46,
                    "fieldId": 37,
                    "operator": "<=",
                    "value": "2",
                    "dynamic": "false"
                },
                {
                    "id": 47,
                    "fieldId": 38,
                    "operator": "!=",
                    "value": "foo",
                    "dynamic": "false"
                },
                {
                    "id": 48,
                    "fieldId": 39,
                    "operator": "like",
                    "value": "%foo",
                    "dynamic": "false"
                }
            ]
        }

# Group History

## Lead call history [/history/leads/{id}/calls]

### Get lead call history [GET]

+ Parameters
    + id (required)

+ Response 200 (application/json)

        [
            {
                "id": "abc123",
                "date": "2005-08-09T18:31:42",
                "direction": "INBOUND | OUTGOING",
                "hangUpCause": "abc",
                "phone": "+180..",
                "callResultStatusId": "abc132",
                "leadStatusId": 1,
                "callId": "abc123"
            }
        ]

## Company call records history [/history/callRecords]

### Get call record history [GET]

+ Response 200 (application/json)

        [
            {
                "id": "abc123",
                "date": "2005-08-09T18:31:42",
                "duration": 60,
                "userName": "Kolya",
                "clientName": "Vasya",
                "clientPhone": "+180..",
                "callId": "abc123"
            }
        ]

# Group Reports